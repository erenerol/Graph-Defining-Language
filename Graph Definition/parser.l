%{
	#include "y.tab.h"
	#include <stdlib.h>
	#include <stdio.h>	

	void yyerror(char *);
	extern int yylineno;
%}

%option yylineno

SET set
MAP map
LIST list
DIRECTEDGRAPH grd
UNDIRECTEDGRAPH gru
VERTEX vertex
QUERY query
QUERYINGFOREQUAL ==
ASSIGN <-
DIRECTEDLINE ->
UNDIRECTEDLINE  —
QUERYSTART §
INCLUDE $i
STARTWITH $s
ENDWITH $e
SUBSTRING $d
PREDICATE $p
EDGE edge
EDGESTART £
EDGEFINISH \/£
ASSOCIATE :
PLUS \+
MINUS \-
MUL \*
DIV \/
DOT \.
COMMA ,
NOT !
QUESTION \?
OR \|
LESSTHAN <
LESSTHANEQUAL <=
GREATERTHAN >
GREATERTHANEQUAL >=
LEFTPARAM \(
RIGHTPARAM \)
LEFTBRACKET \[
RIGHTBRACKET \]
LEFTBRACE \{
RIGHTBRACE \}
SPACE [ \t]+
DIGIT [0-9]
LETTER [a-zA-Z]
NEWLINE \n
NONSTAR [^\*]
NONSTARNONDIV [^\*/]
NONNEWLINE [^\n]
UNDERSCORE _
COMMENT {DIV}{DIV}{NONNEWLINE}*{NEWLINE}|{DIV}\*({NONSTAR}|\*+{NONSTARNONDIV})*\*+{DIV}
ID ({LETTER}|{UNDERSCORE})({LETTER}|{DIGIT}|{UNDERSCORE})*
INT ({MINUS}|{PLUS})?{DIGIT}+
FLOAT {INT}"."{DIGIT}+
STRING \"([^\\\"]|\\n|\\t|\\\\|\\\")*\"


%%
{SET} return SET;
{MAP} return MAP;
{LIST} return LIST;
{DIRECTEDGRAPH} return DIRECTEDGRAPH;
{UNDIRECTEDGRAPH} return UNDIRECTEDGRAPH;
{VERTEX} return VERTEX;
{QUERY} return QUERY;
{EDGE} return EDGE;
{QUERYINGFOREQUAL} return QUERYINGFOREQUAL;
{ASSIGN} return ASSIGN;
{DIRECTEDLINE} return DIRECTEDLINE;
{UNDIRECTEDLINE} return UNDIRECTEDLINE;
{QUERYSTART} return QUERYSTART;
{INCLUDE} return INCLUDE;
{STARTWITH} return STARTWITH;
{ENDWITH} return ENDWITH;
{SUBSTRING} return SUBSTRING;
{PREDICATE} return PREDICATE;
{EDGESTART} return EDGESTART;
{EDGEFINISH} return EDGEFINISH;
{ASSOCIATE} return ASSOCIATE;
{PLUS} return PLUS;
{MINUS} return MINUS;
{MUL} return STAR;
{DIV} return DIV;
{DOT} return DOT;
{COMMA} return COMMA;
{NOT} return NOT;
{QUESTION} return QUESTION;
{OR} return OR;
{LESSTHAN} return LESSTHAN;
{LESSTHANEQUAL} return LESSTHANEQUAL;
{GREATERTHAN} return GREATERTHAN;
{GREATERTHANEQUAL} return GREATERTHANEQUAL;
{LEFTPARAM} return LEFTPARAM;
{RIGHTPARAM} return RIGHTPARAM;
{LEFTBRACKET} return LEFTBRACKET;
{RIGHTBRACKET} return RIGHTBRACKET;
{LEFTBRACE} return LEFTBRACE;
{RIGHTBRACE} return RIGHTBRACE;
{SPACE} /* ignore the SPACE */;
{COMMENT} /* ignore the COMMENT */;
{NEWLINE} /* ignore end of line */;;
{ID} return ID;
{INT} return INT;
{FLOAT} return FLOAT;
{STRING} return STRING;

%%

int yywrap(){
	return 1;
}